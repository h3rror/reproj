clear all;
close all;

rng(1); % for reproducibility

% synthetic example (11) in
% https://www.sciencedirect.com/science/article/pii/S0045782522007927?casa_token=AXNbPCfGtzoAAAAA:6IFh6fogD6SLiCtQxXdhGaCwHohuZCcKVcBsBB1h7Y55JjrUkMinEEL5mtDtx2jTEOaqj9IOoj8

N = 128;
% N = 10;
N_2 = N*(N+1)/2;

B = rand(N,1);
F = rand(N,N_2); % problem: leads to unstable simulations
%% better F: energy-conserving
F_s = rand(N,N,N);
F_s2 = F_s - permute(F_s,[2 1 3]);
F = reduced_convection_operator(F_s2(:,:));
%% FOM snapshot generation for ROM basis construction
A_s = rand(N,N);
% mus = (1:10)/10;
% mus = 1;
% mus = .7;
mus = [.7 .7];

T = 1;
dt = 1e-3;
nT = T/dt;
nmu = numel(mus);
X_b = zeros(N,nT,nmu);
X_0b = zeros(N,nmu);
U_b = zeros(1,nT,nmu);

for i = 1:nmu
    mu = mus(i);
    A = - mu*(A_s+A_s'+ 2*N*eye(N));

    U_1 = 2*rand(1,nT);
    U_b(:,:,i) = U_1;
    x_0 = rand(N,1);
    X_0b(:,i) = x_0;
    X_b(:,1,i) = x_0;

    x = x_0;
    for j = 1:nT
        x_2 = vectorwise_halfkron(x);
        u = U_1(:,j);
        x = x + dt*(A*x + F*x_2 + B*u);
        X_b(:,j+1,i) = x;
    end
end

%% construct POD basis
[Phi,S,~] = svd(X_b(:,:),'econ');
% Phi = eye(10);

ns = [2 4 6 8 10];
% ns = 10;
nn = numel(ns);

t_e_train = zeros(nn,1);
h_e_train = zeros(nn,1);
r_e_train = zeros(nn,1);

t_e_test = zeros(nn,1);
h_e_test = zeros(nn,1);
r_e_test = zeros(nn,1);


A_error = zeros(nn,1);
F_error = zeros(nn,1);
B_error = zeros(nn,1);

rA_error = zeros(nn,1);
rF_error = zeros(nn,1);
rB_error = zeros(nn,1);

Mt = 1;
% U_train = U_1;
U_train = U_b(:,:,1);
% x_0train = x_0;
x_0train = X_0b(:,1);

for k = 1:nn
    n = ns(k);
    V = Phi(:,1:n);
    tB = V'*B;
    tF = V'*F*kron2power(N)*kron(V,V)*power2kron(n);
    mu = .7;
    A = - mu*(A_s+A_s'+ 2*N*eye(N));
    tA = V'*A*V;

    tX_train = zeros(n,nT,Mt);
    X_train = zeros(N,nT,Mt);

    hX_train = zeros(n,nT,Mt);
    rX_train = zeros(n,nT,Mt);

    %% intrusive ROM training error
    for i = 1:Mt
        U = U_train(:,:,i);
        x_0 = x_0train(:,i);
        tx_0 = V'*x_0;

        X_train(:,1,i) = x_0;
        tX_train(:,1,i) = tx_0;

        x = x_0;
        tx = tx_0;
        for j = 1:nT
            x_2 = vectorwise_halfkron(x);
            u = U(:,j);
            x = x + dt*(A*x + F*x_2 + B*u);
            X_train(:,j+1,i) = x;

            tx_2 = vectorwise_halfkron(tx);
            u = U(:,j);
            %% naive ROM
            xr = V*tx;
            xr_2 = vectorwise_halfkron(xr);
            tx2 = V'*(xr + dt*(A*xr + F*xr_2 + B*u));
            %%
            tx = tx + dt*(tA*tx + tF*tx_2 + tB*u);
            tX_train(:,j+1,i) = tx;
        end

        error = norm(V*tX_train(:,:,i) - X_train(:,:,i),"fro")/norm(X_train(:,:,i),"fro");
        t_e_train(k) = t_e_train(k) + error;
    end
    %% operator inference
    bX = V'*X_train(:,:);
    bX0 = bX(:,1:end-1);
    bX1 = bX(:,2:end);
    bX0_2 = vectorwise_halfkron(bX0);
    D = [bX0; bX0_2; U_train(:,:)];
    bX_dot = (bX1-bX0)/dt;          % watch out: don't take time derivatives across trajectories!
    
    O = (D'\bX_dot')';
    hA = O(:,1:n);
    n_2 = n*(n+1)/2;
    hF = O(:,n+1:n+n_2);
    hB = O(:,n+n_2+1:end);

    A_error(k) = norm(tA-hA);
    F_error(k) = norm(tF-hF);
    B_error(k) = norm(tB-hB);

    [~,~,~,O_r] = OpInf_SVD(D,bX_dot);

    rA = O_r(:,1:n);
    rF = O_r(:,n+1:n+n_2);
    rB = O_r(:,n+n_2+1:end);

    rA_error(k) = norm(tA-rA);
    rF_error(k) = norm(tF-rF);
    rB_error(k) = norm(tB-rB);

    In_2 = kron2power(n,2);

    for i = 1:Mt
        U = U_train(:,:,i);
        x_0 = x_0train(:,i);
        hx_0 = V'*x_0;
        rx_0 = V'*x_0;

        X_train(:,1,i) = x_0;
        hX_train(:,1,i) = hx_0;
        rX_train(:,1,i) = rx_0;

        x = x_0;
        hx = hx_0;
        rx = hx_0;
        for j = 1:nT
            % x_2 = vectorwise_halfkron(x);
            % u = U(:,j);
            % x = x + dt*(A*x + F*x_2 + B*u);
            % X_train(:,j+1,i) = x;

            hx_2 = vectorwise_halfkron(hx);
            u = U(:,j);
            %% naive ROM
            % xr = V*tx;
            % xr_2 = vectorwise_halfkron(xr);
            % tx2 = V'*(xr + dt*(A*xr + F*xr_2 + B*u));
            %%
            hx = hx + dt*(hA*hx + hF*hx_2 + hB*u);
            rx = rx + dt*(hA*rx + hF*In_2*kron(rx,rx) + hB*u);

            hX_train(:,j+1,i) = hx;
            rX_train(:,j+1,i) = rx;
        end

        error = norm(V*hX_train(:,:,i) - X_train(:,:,i),"fro")/norm(X_train(:,:,i),"fro");
        h_e_train(k) = h_e_train(k) + error;

        r_error = norm(V*rX_train(:,:,i) - X_train(:,:,i),"fro")/norm(X_train(:,:,i),"fro");
        r_e_train(k) = r_e_train(k) + r_error;
    end


    %% test error

    tX_test = zeros(n,nT,Mt);
    hX_test = zeros(n,nT,Mt);
    rX_test = zeros(n,nT,Mt);
    X_test = zeros(N,nT,Mt);

    for i = 1:Mt    
        % U_test = 2*rand(1,nT);
        % U_test = U_train;
        U_test = U_b(:,:,2);
        % U_test = 10*rand(1,nT);
        % x_0test = rand(N,1);
        % x_0test = x_0;
        % x_0test = X_0b(:,1);
        x_0test = X_0b(:,2);

        tx_0 = V'*x_0test;

        X_test(:,1,i) = x_0test;
        tX_test(:,1,i) = tx_0;
        hX_test(:,1,i) = tx_0;
        rX_test(:,1,i) = tx_0;

        x = x_0test;
        tx = tx_0;
        hx = tx_0;
        rx = tx_0;
        for j = 1:nT
            u = U_test(:,j);

            x_2 = vectorwise_halfkron(x);

            x = x + dt*(A*x + F*x_2 + B*u);
            X_test(:,j+1,i) = x;

            %% naive ROM
            % xr = V*tx;
            % xr_2 = vectorwise_halfkron(xr);
            % tx2 = V'*(xr + dt*(A*xr + F*xr_2 + B*u));
            %%
            tx_2 = vectorwise_halfkron(tx);
            hx_2 = vectorwise_halfkron(hx);

            tx = tx + dt*(tA*tx + tF*tx_2 + tB*u);
            tX_test(:,j+1,i) = tx;

            hx = hx + dt*(hA*hx + hF*hx_2 + hB*u);
            hX_test(:,j+1,i) = hx;

            rx = rx + dt*(hA*rx + hF*In_2*kron(rx,rx) + hB*u);
            rX_test(:,j+1,i) = rx;
        end
        t_error = norm(V*tX_test(:,:,i) - X_test(:,:,i),"fro")/norm(X_test(:,:,i),"fro");
        t_e_test(k) = t_e_test(k) + t_error;

        h_error = norm(V*hX_test(:,:,i) - X_test(:,:,i),"fro")/norm(X_test(:,:,i),"fro");
        h_e_test(k) = h_e_test(k) + h_error;

        r_error = norm(V*rX_test(:,:,i) - X_test(:,:,i),"fro")/norm(X_test(:,:,i),"fro");
        r_e_test(k) = r_e_test(k) + h_error;
    end
    %%
end

figure(1)
semilogy(ns,t_e_train, "ks--","DisplayName","intrusive")
hold on
semilogy(ns,h_e_train, "ob-","Displayname", "OpInf w/o reg")
semilogy(ns,r_e_train, "sg-","Displayname", "OpInf SVD-reg")
ylim([1e-5 1])
title("training error (Fig 1a)")
legend('show')

figure(2)
semilogy(ns,A_error, "rs--","DisplayName","A")
hold on
semilogy(ns,F_error,"bx-","DisplayName","F")
semilogy(ns,B_error,"g+:","DisplayName","B")
ylabel("operator error")
xlabel("ROM dimension")
legend("show")
title("OpInf w/o reg")

figure(3)  
semilogy(ns,t_e_test, "ks--","DisplayName","intrusive")
hold on
semilogy(ns,h_e_test, "ob-","Displayname", "OpInf w/o reg")
semilogy(ns,r_e_test, "sg-","Displayname", "OpInf SVD-reg")
% ylim([1e-5 1])
title("test error (Fig 1b)")
legend('show"')

figure(4)
semilogy(ns,rA_error, "rs--","DisplayName","A")
hold on
semilogy(ns,rF_error,"bx-","DisplayName","F")
semilogy(ns,rB_error,"g+:","DisplayName","B")
ylabel("operator error")
xlabel("ROM dimension")
legend("show")
title("OpInf SVD-reg")

%% rank sufficient operator inference
rank_suff_opinf;